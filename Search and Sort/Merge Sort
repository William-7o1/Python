
# Merge Sort Technique
# Space Compexity- O(n)
# Time Complexity-
# best case - O(nLogn)
# worst and avg case - O(nLogn)

def merge_sort(arr):

    if len(arr)>1:
        mid=len(arr)//2
        left=arr[:mid]
        right=arr[mid:]

        merge_sort(left)
        merge_sort(right)

        i=j=k=0

        while i<len(left) and j<len(right):
            if left[i]<right[j]:
                arr[k]= left[i]
                i+=1
            else:
                arr[k]=right[j]
                j+=1
            k+=1

        while i<len(left):
            arr[k]=left[i]
            i+=1
            k+=1
        while  j<len(right):
            arr[k]=right[j]
            j+=1
            k+=1

    return arr

print(merge_sort([9,8,7,4,6,5,1,2,3]))
