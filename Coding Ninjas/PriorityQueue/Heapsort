def downHeapify(arr,i,n):
    parentIndex=i
    leftChild=(2*parentIndex)+1
    rightChild=(2*parentIndex)+2
    while leftChild<n:
        mini=parentIndex
        if arr[mini]>arr[leftChild]:
            mini=leftChild
        if rightChild<n and arr[mini]>arr[rightChild]:
            mini=rightChild
        if mini==parentIndex:
            break
        arr[mini],arr[parentIndex]=arr[parentIndex],arr[mini]
        parentIndex=mini
        leftChild=(2*parentIndex)+1
        rightChild=(2*parentIndex)+2
    return
        


def heapSort(arr):
    n=len(arr)
    for i in range(n//2,-1,-1):
        downHeapify(arr,i,n)
    for i in range(n-1,0,-1):
        arr[0],arr[i]=arr[i],arr[0]
        downHeapify(arr,0,i)
    return    

n=int(input())
arr=[int(i) for i in input().split()]
heapSort(arr)
for i in arr:
    print(i,end=" ")
