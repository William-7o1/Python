class PriorityQueueNode:
    def __init__(self,ele,priority):
        self.ele = ele
        self.priority = priority
        
class PriorityQueue:
    def __init__(self):
        self.pq = []
    
    def isEmpty(self):
        return self.getSize() == 0
    
    def getSize(self):
        return len(self.pq)

    def getMin(self):
        if self.isEmpty():
            return None
        return self.pq[0].ele
    
    def __percolateUp(self):
        childIndex = self.getSize() - 1
        while childIndex > 0:
            parentIndex = (childIndex-1)//2
            
            if self.pq[parentIndex].priority > self.pq[childIndex].priority:
                self.pq[parentIndex],self.pq[childIndex] = self.pq[childIndex],self.pq[parentIndex]
                childIndex = parentIndex
            else:
                break
            
    def insert(self,ele,priority):
        pqNode = PriorityQueueNode(ele,priority)
        self.pq.append(pqNode)
        self.__percolateUp()
        
    def down(self):
        parentIndex=0
        leftChildIndex=2*(parentIndex)+1
        rightChildIndex=2*(parentIndex)+2
        while leftChildIndex<self.getSize():
            mini=parentIndex
            if self.pq[mini].priority>self.pq[leftChildIndex].priority:
                mini=leftChildIndex
            if rightChildIndex<self.getSize() and self.pq[mini].priority>self.pq[rightChildIndex].priority:
                mini=rightChildIndex
            if mini==parentIndex:
                break
            self.pq[parentIndex],self.pq[mini]=self.pq[mini],self.pq[parentIndex]
            parentIndex=mini
            leftChildIndex=2*(parentIndex)+1
            rightChildIndex=2*(parentIndex)+2
        
        
    def removeMin(self):

        temp=self.pq[0].ele
        self.pq[0]=self.pq[self.getSize()-1]
        self.pq.pop()
        self.down()
        return temp
