class graph:
    def __init__(self, n):
        self.n=n
        self.adxMatrix=[[False for i in range(self.n)]for i in range(self.n)]
    
    def add(self,v1,v2):
        if self.adxMatrix[v1][v2]==1:
            return 
        self.adxMatrix[v1][v2]=1
        self.adxMatrix[v2][v1]=1
        return
    
    def remove(self,v1,v2):
        if self.adxMatrix[v1][v2]==0:
            return 
        self.adxMatrix[v1][v2]=0
        self.adxMatrix[v2][v1]=0
        return
    
    def bfsHelper(self,sv,visited):
        q=[]
        q.append(sv)
        visited[sv]=True
        while q:
            u = q.pop(0)
            print(u)
            for i in range(self.n):
                if self.adxMatrix[u][i] == 1 and visited[i] is False:
                    q.append(i)
                    visited[i]=True

    def bfs(self):
        visited=[False for i in range(self.n)]
        for i in range(self.n):
            if visited[i] is False:
                self.bfsHelper(i,visited)
        
        
        
        
g = graph(7)
g.add(1,0)
g.add(0,2)
g.add(3,4)
g.add(5,3)
g.add(6,4)
g.bfs()
